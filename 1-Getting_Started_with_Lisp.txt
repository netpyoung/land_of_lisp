GETTING STARTED WITH LISP
1장. Lisp와 함께 시작하기

 이번 장은 다양한 Lisp의 방언들에 대해서 소개로 시작합니다. 그런 다음 이 책에서 다룰 방언, ANSI Common Lisp 에 대해 예기할 것입니다. 마지막으로, 여러분이 앞으로 만들게 될 Lisp게임들을 돌리는 ANSI Common Lisp의 구현인 CLISP의 설치와 테스팅을 시작할 것입니다.

Lisp Dialects
 Lisp의 주요 원직을 준하는 언어는 Lisp 방언Dialects으로 간주됩니다. 이 원칙들은 매우 간단하기 때문에, 문자그대로 수백개의 Lisp방언들이 만들어진것은 놀랄만한 일이 아닙니다. 사실, Lisper들의 싹들이 연습삼아 만든 그들의 Lisp방언들로 인해, 행성을 통틀어 아마도 수천개의 미완성된 Lisp들이 하드디스크에 오랫동안 방치해둔 디렉토리안에서 잠자고 있을것 입니다. 그러나, 상당수의 Lisp커뮤니티가 사용하는 두 Lisp는 다음과 같습니다 : ANSI Common Lisp(축약해서 CL) 그리고 Scheme.

 이 책에서, 저희는 둘 중 조금 더 유명한 ANSI Common Lisp방언에 대해서 중점으로 이야기를 나눌 것입니다. 이 책을 읽음으로써 여러분이 얻는 많은 지식 또한 (비록 함수의 이름이 방언들마다 다른 경향이 있지만) Scheme과 관계가 있습니다.


A Tale of Two Lisps
 ANSI Common Lisp와 Scheme에는 깊은 철학적 다름이 있고, 서로 취향이 다른 프로그래머들을 매료시킵니다. 일단 Lisp언어에 대해 더 배우면, 여러분이 선호하는 방언을 결정할 수 있습니다. 여기에는 옳고 그른 선택이 없습니다.

 여러분의 결정을 존중하면서, 저는 여러분을 위해 다음에 나오는 취향문제를 제작해 보았습니다:
[pic]

 A를 선택하셨다면, 여러분은 언어의 원초적인 힘을 좋아합니다. 여러분은 여러분의 언어가 많은 실용적인 타협으로 인해 조금 못생긴것에 대해 생각하지 않고, 오랜기간 여러분은 타이트한 코드를 작성할수 있습니다. ANSI Common Lisp는 여러분을 위한 최고의 언어입니다! 고대 Lisp방언들로부터 가장 직접적으로 계통 이어가는 ANSI Common Lisp는, 프로그래머의 수만 시간위에 세워졌고, 놀랄만한 풍부한 기능을 줍니다. 수많은 역사적인 사건로 인한 몇몇 바로크 함수 이름들을 가지고 있지만, 이 Lisp는 진정한right 해커의 손안에서 실제로 날아 다닐 수 있습니다.

 B를 선택하셨다면, 여러분은 깔끔하고 우아한 언어를 선호합니다. 근본적인 프로그래밍 문제에 관심이 많고 아름다운 목초지 안에 있는동안 행복해하며, 여러분의 코드의 아름다움에대해 고민하고, 때때로 이론적인 컴퓨팅 문제에 대한 연구 논문을 작성합니다. Scheme이 여러분을 위한 언어입니다! 이것은 Guy L.Steele와 Gerald Jay Sussman, 그리고 ideal Lisp에 관한 몇몇 성찰로 1970중반에 만들어졌습니다. Scheme의 코드는 좀더 장황한verbose 경향이 있는데, Schemer들은 가능한 짧은 프로그램을 만드는것보다 코드의 수학적인 순수함을 더욱 중시 여기기 때문입니다.

 C를 선택하셨다면, 여러분은 이 모든것을 원하는 사람입니다 : ANSI CL의 힘과 Scheme의 수학적 아름다움. 미래에는 바뀔 수 있겠지만, 이 경우에는 완벽하게 만족시키는 Lisp방언이 없습니다. 여러분의 일을 위한 언어는 (비록 Lisp 책에서의 신성 모독과 같은 발언이지만)Haskell입니다. 이것은 Lisp방언으로 간주되지 않지만, 이것의 추종자들은 구문 형식 유지, native list 지원과 같은 유명한 Lisper들 사이의 패러다임을 따르고 고차원-기능 함수에 전적으로 의존합니다. 더 중요한것은, 이것은 굉장히 깨끗한 표면 아래 매우 강력한 함수성functionality을 감추는, 극도로 수학적인 (심지어 Scheme보다 더한)엄격함을 지닙니다. 이것은 늑대가 양의 탈을 쓰기위해 필수적입니다. Lisp와 마찬가지로 Haskell은 프로그래머가 더 살펴봄으로써 많은것을 얻을 수 있는 언어입니다


Up-and-Coming Lisps 
 앞서 언급했듯이, Lisp방언은 ANSI Common Lisp의 유연성과 Scheme의 우아함을  동시에 보유할 수 없습니다. 그러나, 지평선위의 새로운 도전자들이 아마 가까운 미래에 새로운 왕좌를 차지할것입니다.
 그 가능성을 보여주는 Clojure는 Rich Hickey에 의해 개발된 새로운 Lisp방언입니다. Java 플렛폼상에서 빌드된 Clojure는, 수많은 성숙한 자바 라이브러리를 올바르게 상자 밖으로 꺼낼 수 있도록 합니다. 또한, Clojure는 멀티쓰레드 프로그래밍을 쉽게하는 몇몇 영리하고 면밀한 기능을 포함하고 있고, 이것은 유비쿼터스 멀티코어 CPU 프로그래밍을 위한 유용한 툴로 만들어 줍니다.

 또다른 흥미로운 경쟁자는 Arc입니다. 이것은 주로 유명한 Lisper인 Paul Graham에 의해 개발이 되고있는 진짜 Lisp언어입니다. Arc는 여전히 개발 초기 단계에 머물러 있으며, 다른 Lisp보다 얼마나 개선되었는지에 관한 의견이 분분합니다. 또한, 이것의 개발은 빙하기의 느린 속도처럼 진행되었습니다. 이것은 누군가가 Arc가 의미있는 경쟁자라 말하기 전부터 있었습니다. 우리의 에필로그에서 Arch와 Clojure에 관해 맛보게 될 것입니다.


Lisp Dialects Used for Scripting
 스크립팅에 쓰이는 몇몇 Lisp방언들에는 이러한 것들이 있습니다 :

z Emacs Lisp는, 유명한 문서 편집기 Emacs의 내부 스크립팅에 사용됩니다.
z Guile Scheme은 몇몇 오픈소스 프로그램 내부에서 사용됩니다.
z Script-Fu Scheme은 GIMP 이미지 에디터에서 사용됩니다.

 이러한 방언들은 주요 Lisp가지(branches)의 예전 버전에서 갈라져나왔고, 일반적으로 단일 응용프로그램 제작하는데 쓰이지 않습니다. 그럼에도 불구하고 이들은 Lisp의 방언으로 존중할만합니다.


ANSI Common Lisp
 1981년, 수많은 방언들로 어지럽히는것을 방지하기 위해, 다양한 Lisp커뮤니티 멤버들이 Common Lisp라는 새로운 방언을 위한 초안을 내놓았습니다. 이 언어는 1986년에 더 수정되어 ANSI Common Lisp표준으로 전환되었습니다. 많은수의 Lisp의 예전 버전 개발자들이 그들의 인터프린터와 컴파일러를 이 새로운 표준을 준수하도록 수정하였고, 이것으로 매우 유명한 Lisp버전이 되었고 오늘날까지 유지되고 있습니다.

 Common Lisp의 디자인 목표는 멀티페러다임 언어를 만들고자하는것이며, 이것이 의미하는 것은 다양한 스타일의 프로그래밍의 지원을 포함하는 것입니다. 여러분은 객체-지향 프로그래밍이라는것을 들어보았을텐데, 이것은 Common Lisp에서 매우 멋지게 수행할 수 있습니다. 여러분이 아마도 들어보지 못한 프로그래밍 스타일에는 함수형 프로그래밍(functional programming), 제네릭 프로그래밍(generic programming),그리고 특수 분야 언어 프로그래밍(domain specific language programming)이 있습니다. 이 모든 것들을 Common Lisp는 지원합니다. 우리가 이 책을 진행 하는 동안, 다른 이들과 함께, 여러분은 이 스타일 각각에 대한 것을 배울 것입니다.


Getting Started with CLISP 
 사용가능한 Lisp 컴파일러들이 많이 있으나, 이 중 특히 시작하기 쉬운것은 : 오픈소스 Common Lisp인 CLISP입니다. CLISP는 설치가 간편하며, 어떠한 운영체제라도 돌아갑니다. 

 또다른 유명한 Lisp에는, 오픈소스이며 CLISP보다 좀더 강력한것으로 여겨지는 빠른 Common Lisp, Steel Bank Common Lisp (SBCL)와; Franz 사의 강력한 상업 Lisp인 Allegro Common Lisp; LispWorks, Clozure CL; 그리고 CMUCL가 있습니다. Mac사용자들은 그들의 머신에서 쉽게 돌릴수 있는 LispWork혹은 Clozure CL을 고려해 봐야합니다. 그러나, 저희 목표를 위해서는 CLISP가 가장 좋은 선택입니다.


Installing CLISP 
 여러분은 CLISP를 http://clisp.cons.org/ 에서 설치파일을 다운로드 받으실 수 있습니다. 이것은 Windows, Mac, 그리고 리눅스에서 돌아갑니다. Window에서는 설치 프로그램을 실행하면 됩니다. Mac에서는 웹사이트에 자세히 나와있는 추가작업을 거쳐야합니다.
[Window기준 http://sourceforge.net/projects/clisp/ 에서 설치 프로그램을 받을 수 있습니다]

 데비안-기반 Linux에서는 여러분의 표준 소스 저장소에 CLISP가 이미 존재하는것을 발견할 수 있습니다[우분투도 데비안 기반 배포판입니다]. 단지 command line에서 apt-get install clisp를 입력하는것 만으로도 CLISP가 자동적으로 설치가 됩니다.

 다른 리눅스 배포판(Fedora, SUSE, 기타등등)에서는, 여러분은 CLISP 웹 사이트에서 "Linux packages" 아레 목록에서 표준 패키지를 사용할 수 있습니다. 그리고 숙련된 리눅스 사용자라면 소스로부터 CLISP를 컴파일 할 수 있을것입니다.


Starting Up CLISP 
 CLISP를 실행하려면, command line에서 clisp라고 칩니다. 정상적으로 설치가 되었다면, 다음과 같은 prompt를 볼 수 있습니다 :
[REPL]

 대부분의 Common Lisp환경과 같이, CLISP를 시작하면 이는 자동적으로 여러분을 read-eval-print loop(REPL, 읽고-평가-출력 루프)로 이동시킵니다. 이는 여러분이 타이핑한 Lisp code를 즉시 실행할 수 있다는 것을 의미합니다.

 (+  3  (*  2  4))를 쳐봅니다. 여러분은 표현식아래 출력된 결과를 확인 할 수 있습니다:
[REPL]

 이는 REPL가 어떻게 동작하는 지를 보여줍니다. 표현식을 입력하면, Lisp는 즉각적으로 그것을 평가하고 결과 값을 반환합니다. CLISP를 종료하려면, (quit)를 입력하면됩니다.

 이제 여러분의 컴퓨터에서 동작하는 CLISP를 가졌으므로, Lisp 게임을 작성할 준비가 되었습니다!


What You've Learned 
 이번 장에서, 저희는 서로 다른 Lisp방언들을 다루었고 CLISP를 설치하였습니다. 여러분이 배운것은 다음과 같습니다 : 

z 두가지 주요 Lisp방언이 있다 : Common Lisp와 Scheme. 두가지 모두 많은 기능을 제공하지만, 이 책에서는 Common Lisp에 중점을 둘 것입니다.
z Common Lisp는 멀티페러다임 언어이며, 이것이 의미하는 바는 많은수의 프로그래밍 스타일을 지원한다는 것이다.
z CLISP는 Common Lisp의 구현이며 설치하기 쉬워, Lisp 초보자에게는 좋은 선택이다.
z CLISP의 REPL을 통해 Lisp명령을 입력할 수 있다.
[pic]


"그건 그렇다치고... 실수하거나, CLISP가 미쳐 날뛰면 :q만 입력하면 모든게 해결된다구!"
